#!/usr/bin/python3

# Préparation pour retro_02_tf.py

from descente import *

from tensorflow.keras import backend as K
from mpl_toolkits.mplot3d import Axes3D

# Fonction tanh
# sa dérivée tanh'(x) = 1 - tanh(x)**2
def tanh(x):
    E = np.exp(-2*x)
    return (1-E)/(1+E)

# Fonction sigma
def sigma(x):
    return 1/(1+np.exp(-x))

# Fonction heaviside
# définie dans 'descente'
def heaviside(x):
    return np.heaviside(x,1)

# carré rouge +1
# rond bleus 0
# à trouver : fonction XOR : +1 pour (1,0) et (0,1) et 0 pour (0,0) et (1,1)
carres_rouges = [(0,1), (1,0)]
ronds_bleus   = [(0,0), (1,1)] 


# Fonction produite par le neurone
def f(x,y,poids,phi):
    a1,b1,c1,a2,b2,c2,a3,b3,c3 = poids
    S1 = phi(a1*x+b1*y+c1) # sortie de premier neurone
    S2 = phi(a2*x+b2*y+c2) # sortie du second neurone
    val = phi(a3*S1+b3*S2+c3)
    return val


# Affichage
def graphique_points():

    phi = sigma
    # k=0 init
    poids = [1.0, 2.0, -3.0, -3.0, -2.0, 1.0, 1.0, 1.0, -1.0]

    # k=1
    # poids = 

    # k = 400
    # poids = 

    # k = 1000
    poids = [3.5623512, 3.5675926, -5.5344734, -5.3682723, -5.3935294, 1.8403336, -6.323481, -6.380108, 3.121689]


    # phi = heaviside
    # poids = (1,1,-0.5, -1,-1,1.5, 1,1,-1.5)

    n = 50
    VX = np.linspace(-0.5, 1.5, n)
    VY = np.linspace(-0.5, 1.5, n)
    X,Y = np.meshgrid(VX, VY)
    Z = f(X,Y,poids,phi)


    # Contour - niveaux donnés avec valeurs

    mes_niveaux = np.linspace(0,1,20)
    plt.contourf(X, Y, Z,mes_niveaux, cmap='hot') 
    # plt.contourf(X, Y, Z,20,cmap='hot') 

    plt.colorbar();
    # trace = plt.contour(X, Y, Z, mes_niveaux)
    # plt.clabel(trace, inline=True, fontsize=8)

    for x, y in carres_rouges:    # points
        plt.scatter(x, y, marker='s', color='red')
    for x, y in ronds_bleus:    # points
        plt.scatter(x, y, color='blue')   



    # plt.axis('equal')
    # plt.xlim(-0.5,1.5)
    # plt.ylim(-0.5,1.5)
    plt.tight_layout()
    # plt.savefig('retro_02_a.png')
    plt.show()
    return

graphique_points()


# Affichage
def graphique_3d():

    # tanh
    phi = sigma

    # k=0 init
    poids = [1.0, 2.0, -3.0, -3.0, -2.0, 1.0, 1.0, 1.0, -1.0]

    # k=100
    # poids = 

    # k = 400
    # poids = 

    # k = 1000
    poids = [3.5623512, 3.5675926, -5.5344734, -5.3682723, -5.3935294, 1.8403336, -6.323481, -6.380108, 3.121689]

    n = 50
    VX = np.linspace(-0.5, 1.5, n)
    VY = np.linspace(-0.5, 1.5, n)
    X,Y = np.meshgrid(VX, VY)
    Z = f(X,Y,poids,phi)

    fig = plt.figure()
    ax = plt.axes(projection='3d')

    # Fig 1. n = 5
    ax.view_init(20, -70)
    ax.plot_surface(X, Y, Z)


    # trace = plt.contour(X, Y, Z, mes_niveaux)
    # plt.clabel(trace, inline=True, fontsize=8)
    ax.set_xlabel("axe x")
    ax.set_ylabel("axe y")

    # plt.axis('equal')
    plt.xlim(-0.5,1.5)
    plt.ylim(-0.5,1.5)
    plt.tight_layout()
    # plt.savefig('retro_02_b.png')
    plt.show()
    return

graphique_3d()


def affiche_erreurs():
    liste_erreur = [0.29618967, 0.2935, 0.29115292, 0.2890972, 0.28728575, 0.28567696, 0.28423515, 0.2829304, 0.2817381, 0.28063822, 0.2796147, 0.2786548, 0.2777484, 0.27688757, 0.27606595, 0.27527878, 0.2745221, 0.27379295, 0.2730888, 0.2724079, 0.27174854, 0.27110952, 0.27048975, 0.2698884, 0.26930466, 0.26873788, 0.26818737, 0.26765263, 0.26713318, 0.26662856, 0.26613817, 0.26566172, 0.26519874, 0.26474884, 0.26431155, 0.26388654, 0.2634735, 0.26307195, 0.26268163, 0.26230213, 0.2619331, 0.26157424, 0.26122516, 0.2608856, 0.26055524, 0.2602338, 0.25992092, 0.25961635, 0.25931984, 0.25903103, 0.25874972, 0.2584756, 0.2582085, 0.2579481, 0.25769418, 0.2574465, 0.25720483, 0.25696898, 0.2567387, 0.25651377, 0.25629404, 0.2560793, 0.25586927, 0.25566387, 0.25546288, 0.2552661, 0.25507334, 0.2548845, 0.25469935, 0.25451776, 0.2543396, 0.2541646, 0.25399274, 0.25382382, 0.2536576, 0.25349408, 0.25333312, 0.25317445, 0.2530181, 0.25286385, 0.25271153, 0.2525611, 0.25241232, 0.25226521, 0.25211954, 0.2519753, 0.25183225, 0.25169033, 0.25154942, 0.25140944, 0.25127023, 0.2511317, 0.25099373, 0.25085622, 0.250719, 0.25058216, 0.25044537, 0.25030863, 0.25017178, 0.2500348, 0.24989751, 0.24975982, 0.24962166, 0.24948294, 0.24934347, 0.24920328, 0.24906214, 0.24892004, 0.24877687, 0.24863249, 0.24848682, 0.24833979, 0.24819127, 0.24804111, 0.24788937, 0.2477358, 0.2475804, 0.247423, 0.24726358, 0.24710202, 0.24693823, 0.24677213, 0.2466036, 0.24643251, 0.24625893, 0.24608263, 0.2459036, 0.2457217, 0.24553695, 0.24534918, 0.24515837, 0.2449644, 0.24476725, 0.24456678, 0.24436304, 0.24415588, 0.24394533, 0.2437312, 0.24351355, 0.24329232, 0.24306744, 0.24283889, 0.24260661, 0.2423706, 0.24213086, 0.24188735, 0.24163999, 0.24138886, 0.24113391, 0.24087515, 0.2406126, 0.24034628, 0.24007618, 0.23980229, 0.23952474, 0.23924348, 0.23895854, 0.23867004, 0.23837797, 0.23808238, 0.2377834, 0.23748103, 0.23717532, 0.23686638, 0.23655431, 0.23623914, 0.23592103, 0.23559996, 0.23527613, 0.23494962, 0.23462048, 0.23428884, 0.2339548, 0.2336185, 0.23328, 0.23293944, 0.23259693, 0.2322526, 0.23190656, 0.23155889, 0.2312097, 0.23085919, 0.2305074, 0.23015448, 0.22980049, 0.2294456, 0.22908996, 0.22873355, 0.2283766, 0.22801918, 0.22766134, 0.2273033, 0.22694507, 0.22658676, 0.2262285, 0.22587033, 0.22551239, 0.22515474, 0.22479752, 0.22444077, 0.22408457, 0.22372898, 0.22337413, 0.22302008, 0.22266683, 0.22231448, 0.22196317, 0.22161287, 0.22126368, 0.22091563, 0.22056879, 0.22022323, 0.21987897, 0.21953604, 0.21919456, 0.21885449, 0.21851589, 0.21817881, 0.21784323, 0.21750927, 0.21717694, 0.2168462, 0.21651715, 0.21618979, 0.21586415, 0.21554023, 0.21521802, 0.21489766, 0.21457902, 0.21426222, 0.21394718, 0.21363401, 0.2133227, 0.21301323, 0.21270558, 0.21239984, 0.21209595, 0.21179396, 0.21149383, 0.21119562, 0.21089926, 0.21060482, 0.21031228, 0.21002162, 0.20973286, 0.20944603, 0.20916106, 0.20887798, 0.2085968, 0.20831749, 0.20804006, 0.20776455, 0.20749089, 0.2072191, 0.20694917, 0.2066811, 0.20641488, 0.20615053, 0.205888, 0.20562729, 0.20536843, 0.20511138, 0.20485607, 0.20460264, 0.20435095, 0.20410106, 0.20385294, 0.20360652, 0.2033619, 0.20311901, 0.20287783, 0.20263843, 0.20240068, 0.20216458, 0.2019302, 0.2016975, 0.20146644, 0.20123704, 0.20100918, 0.20078304, 0.20055848, 0.20033547, 0.20011407, 0.19989422, 0.1996759, 0.19945914, 0.19924384, 0.19903009, 0.19881782, 0.19860703, 0.1983977, 0.1981898, 0.19798332, 0.19777825, 0.1975746, 0.19737229, 0.19717136, 0.19697177, 0.19677351, 0.19657657, 0.19638091, 0.19618651, 0.1959934, 0.1958015, 0.19561082, 0.1954214, 0.1952331, 0.19504598, 0.19486004, 0.19467515, 0.19449143, 0.19430876, 0.1941272, 0.19394669, 0.19376713, 0.19358864, 0.19341113, 0.19323456, 0.19305891, 0.19288424, 0.19271043, 0.19253749, 0.19236541, 0.19219412, 0.1920237, 0.191854, 0.19168499, 0.19151682, 0.19134927, 0.19118245, 0.19101629, 0.1908507, 0.19068569, 0.1905213, 0.19035742, 0.19019404, 0.19003113, 0.18986863, 0.1897066, 0.18954492, 0.18938357, 0.18922254, 0.18906178, 0.1889013, 0.188741, 0.18858086, 0.18842085, 0.18826094, 0.18810108, 0.18794122, 0.1877813, 0.18762133, 0.18746126, 0.18730094, 0.18714045, 0.18697967, 0.18681857, 0.18665713, 0.1864952, 0.18633279, 0.18616991, 0.18600635, 0.18584214, 0.18567726, 0.18551148, 0.18534493, 0.18517739, 0.18500882, 0.18483922, 0.18466848, 0.18449646, 0.1843231, 0.18414834, 0.18397205, 0.1837942, 0.18361461, 0.18343323, 0.18325, 0.18306468, 0.18287733, 0.18268768, 0.1824957, 0.18230116, 0.18210408, 0.18190424, 0.18170153, 0.18149579, 0.18128681, 0.18107457, 0.1808588, 0.18063936, 0.1804161, 0.18018883, 0.17995742, 0.1797216, 0.17948121, 0.17923608, 0.17898595, 0.17873064, 0.17847002, 0.17820372, 0.1779316, 0.17765342, 0.17736891, 0.17707792, 0.17678015, 0.17647538, 0.1761633, 0.17584378, 0.17551652, 0.17518125, 0.17483775, 0.1744858, 0.17412516, 0.17375559, 0.17337689, 0.17298885, 0.17259124, 0.17218396, 0.17176676, 0.17133954, 0.17090212, 0.17045444, 0.16999638, 0.16952792, 0.169049, 0.16855961, 0.16805977, 0.16754958, 0.16702905, 0.16649838, 0.16595766, 0.1654071, 0.16484699, 0.16427746, 0.16369888, 0.16311148, 0.16251567, 0.16191173, 0.1613001, 0.16068113, 0.16005525, 0.15942284, 0.15878433, 0.15814015, 0.1574907, 0.15683642, 0.15617767, 0.1555148, 0.15484829, 0.15417841, 0.15350553, 0.15282992, 0.15215185, 0.15147166, 0.1507895, 0.15010566, 0.14942023, 0.14873344, 0.14804539, 0.14735624, 0.14666604, 0.14597484, 0.14528279, 0.14458981, 0.14389598, 0.14320134, 0.14250582, 0.14180946, 0.14111227, 0.14041406, 0.13971499, 0.13901496, 0.1383139, 0.13761187, 0.13690868, 0.1362044, 0.13549902, 0.1347924, 0.13408464, 0.13337561, 0.13266537, 0.13195385, 0.13124108, 0.1305271, 0.1298118, 0.12909526, 0.12837753, 0.12765859, 0.12693849, 0.12621725, 0.1254949, 0.124771535, 0.124047205, 0.123321936, 0.122595824, 0.12186895, 0.12114133, 0.12041311, 0.11968435, 0.11895518, 0.11822566, 0.11749585, 0.11676589, 0.11603589, 0.115305945, 0.11457617, 0.113846645, 0.113117486, 0.112388864, 0.11166083, 0.11093354, 0.110207036, 0.10948151, 0.108757064, 0.108033754, 0.107311785, 0.10659118, 0.10587206, 0.1051546, 0.10443887, 0.10372496, 0.10301294, 0.10230301, 0.10159522, 0.10088963, 0.100186385, 0.09948561, 0.09878728, 0.09809164, 0.09739864, 0.09670842, 0.0960211, 0.0953367, 0.094655305, 0.093976974, 0.09330185, 0.092629954, 0.091961294, 0.09129603, 0.09063417, 0.089975774, 0.0893209, 0.088669606, 0.088021934, 0.087377936, 0.08673767, 0.08610114, 0.08546843, 0.08483954, 0.08421455, 0.08359342, 0.08297624, 0.082363024, 0.081753775, 0.08114858, 0.08054739, 0.07995026, 0.0793572, 0.07876827, 0.07818341, 0.077602684, 0.07702604, 0.07645357, 0.075885214, 0.07532103, 0.07476103, 0.074205175, 0.073653474, 0.07310594, 0.07256259, 0.072023384, 0.07148834, 0.070957445, 0.07043072, 0.06990811, 0.06938967, 0.06887535, 0.06836517, 0.06785907, 0.06735709, 0.066859156, 0.06636535, 0.065875605, 0.065389894, 0.06490821, 0.06443054, 0.06395687, 0.06348724, 0.0630215, 0.06255974, 0.062101908, 0.061648015, 0.061197974, 0.060751826, 0.060309514, 0.059871033, 0.059436403, 0.059005536, 0.058578454, 0.058155082, 0.057735436, 0.057319477, 0.0569072, 0.056498572, 0.05609359, 0.05569218, 0.05529438, 0.054900117, 0.054509357, 0.05412212, 0.05373837, 0.053358063, 0.05298117, 0.052607693, 0.052237585, 0.051870838, 0.0515074, 0.051147275, 0.050790403, 0.050436772, 0.05008638, 0.049739163, 0.04939509, 0.0490542, 0.048716407, 0.048381723, 0.048050076, 0.047721446, 0.047395878, 0.047073275, 0.046753615, 0.0464369, 0.046123065, 0.045812123, 0.045504067, 0.045198776, 0.04489635, 0.044596665, 0.04429973, 0.04400554, 0.043714028, 0.04342519, 0.043138996, 0.042855453, 0.042574495, 0.042296126, 0.042020287, 0.041747015, 0.041476205, 0.041207884, 0.040942006, 0.04067857, 0.040417556, 0.04015892, 0.039902627, 0.03964869, 0.03939706, 0.039147712, 0.03890066, 0.03865583, 0.038413227, 0.038172834, 0.037934598, 0.037698567, 0.037464634, 0.037232816, 0.037003085, 0.036775455, 0.036549866, 0.036326315, 0.036104746, 0.035885207, 0.035667595, 0.03545196, 0.03523824, 0.035026435, 0.03481651, 0.03460846, 0.034402277, 0.03419791, 0.033995356, 0.03379461, 0.033595633, 0.03339842, 0.033202924, 0.03300918, 0.032817118, 0.032626748, 0.03243807, 0.03225102, 0.0320656, 0.031881813, 0.031699635, 0.031519007, 0.031339966, 0.031162487, 0.030986536, 0.030812109, 0.030639172, 0.030467737, 0.030297779, 0.030129254, 0.029962199, 0.02979656, 0.029632337, 0.02946952, 0.02930806, 0.029148003, 0.028989278, 0.028831914, 0.028675862, 0.028521147, 0.0283677, 0.028215569, 0.028064689, 0.027915085, 0.027766708, 0.027619604, 0.027473684, 0.027328998, 0.027185494, 0.027043182, 0.026902039, 0.026762057, 0.026623232, 0.02648553, 0.026348952, 0.026213517, 0.026079157, 0.025945894, 0.025813714, 0.0256826, 0.025552548, 0.025423534, 0.025295567, 0.025168639, 0.025042715, 0.02491779, 0.024793874, 0.024670934, 0.024548957, 0.024427952, 0.024307922, 0.024188833, 0.024070678, 0.02395345, 0.023837138, 0.023721728, 0.023607235, 0.023493621, 0.023380892, 0.023269031, 0.023158062, 0.023047928, 0.02293864, 0.022830188, 0.022722574, 0.022615794, 0.02250981, 0.022404647, 0.02230027, 0.022196699, 0.0220939, 0.021991879, 0.021890635, 0.021790152, 0.021690402, 0.02159141, 0.021493154, 0.021395633, 0.02129883, 0.021202756, 0.021107385, 0.021012723, 0.02091876, 0.020825485, 0.020732883, 0.020640954, 0.02054971, 0.020459147, 0.02036922, 0.020279951, 0.020191323, 0.020103335, 0.020015972, 0.019929253, 0.019843146, 0.019757643, 0.019672783, 0.0195885, 0.019504817, 0.019421745, 0.019339247, 0.019257315, 0.019175988, 0.019095218, 0.019015033, 0.018935386, 0.018856302, 0.018777769, 0.018699786, 0.018622328, 0.018545406, 0.01846902, 0.018393168, 0.018317835, 0.018243007, 0.018168699, 0.0180949, 0.018021604, 0.017948799, 0.017876491, 0.017804667, 0.017733319, 0.01766247, 0.017592069, 0.017522171, 0.017452726, 0.017383734, 0.017315218, 0.017247157, 0.017179534, 0.017112372, 0.017045625, 0.016979361, 0.016913492, 0.016848072, 0.016783088, 0.01671852, 0.016654352, 0.016590625, 0.016527297, 0.016464388, 0.016401881, 0.01633977, 0.016278066, 0.016216753, 0.01615583, 0.016095296, 0.016035158, 0.015975397, 0.015916005, 0.015856981, 0.015798356, 0.01574008, 0.01568218, 0.015624637, 0.015567457, 0.01551063, 0.015454151, 0.015398028, 0.015342258, 0.0152868265, 0.015231742, 0.015176987, 0.015122583, 0.015068494, 0.015014748, 0.014961328, 0.014908234, 0.014855464, 0.014803007, 0.01475087, 0.014699061, 0.014647549, 0.014596341, 0.014545455, 0.014494868, 0.014444577, 0.01439459, 0.014344893, 0.0142955035, 0.014246404, 0.014197594, 0.014149057, 0.014100822, 0.01405287, 0.014005185, 0.013957786, 0.013910675, 0.013863822, 0.013817249, 0.013770938, 0.013724908, 0.013679135, 0.013633619, 0.013588385, 0.013543385, 0.01349866, 0.013454188, 0.013409957, 0.013365995, 0.013322277, 0.013278789, 0.013235573, 0.013192583, 0.01314984, 0.01310734, 0.01306507, 0.013023037, 0.012981245, 0.012939692, 0.012898358, 0.01285726, 0.012816382, 0.01277573, 0.012735313, 0.012695111, 0.012655126, 0.012615352, 0.012575809, 0.012536482, 0.012497365, 0.012458466, 0.0124197705, 0.012381284, 0.012343013, 0.012304939, 0.012267071, 0.012229422, 0.012191951, 0.012154686, 0.012117632, 0.012080766, 0.012044096, 0.0120076155, 0.011971332, 0.011935255, 0.011899348, 0.011863634, 0.01182811, 0.011792765, 0.011757623, 0.011722638, 0.011687854, 0.011653244, 0.01161882, 0.011584569, 0.01155049, 0.0115165915, 0.011482876, 0.011449318, 0.01141594, 0.01138273, 0.011349695, 0.011316823, 0.011284125, 0.011251583, 0.0112192, 0.011187, 0.011154952, 0.011123065, 0.011091337, 0.011059769, 0.011028364, 0.010997109, 0.010966014, 0.010935068, 0.010904285, 0.010873636, 0.0108431615, 0.010812826, 0.01078264, 0.010752606, 0.010722721, 0.010692975, 0.010663379, 0.01063392, 0.010604614, 0.010575444, 0.010546423, 0.010517539, 0.010488801, 0.010460187, 0.010431721, 0.010403386, 0.0103752, 0.0103471335, 0.010319205, 0.01029141, 0.010263745, 0.010236216, 0.010208813, 0.010181549, 0.0101544075, 0.010127392, 0.010100506, 0.010073746, 0.01004711, 0.0100206025, 0.009994218, 0.009967954, 0.009941807, 0.009915795, 0.009889895, 0.009864123, 0.009838451, 0.009812914, 0.0097874915, 0.009762181]

    N =  len(liste_erreur)
    epoque = np.arange(0,N)
    plt.plot(epoque,liste_erreur)
    plt.xlabel('itérations')
    plt.ylabel('erreur')
    plt.tight_layout()

    # plt.savefig('retro_02_c.png')
    plt.show()   

affiche_erreurs()